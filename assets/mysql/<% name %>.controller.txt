import { Router, Request, Response, NextFunction } from 'express';
import Controller from '../../utils/interfaces/Controller.interface';
import HttpException from '../../utils/exceptions/http.exception';
import validationMiddleware from '../../middleware/validation.middleware';
import validate from './<% name %>.validation';
import responseHandler from '../../utils/ResponseHandler';
import <% Name %>Model from './<% name %>.model';

class <% Name %>Controller implements Controller {
  private <% name %> = <% Name %>Model;
  public path = '/<% pluralName %>';
  public router = Router();

  constructor(force: boolean = false) {
    this.initializeRoutes();
    this.createTable(force);
  }

  private initializeRoutes(): void {
    this.router.get(`${this.path}`, this.findAll);
    this.router.post(
      `${this.path}`,
      validationMiddleware(validate.create),
      this.create,
    );
    this.router.delete(`${this.path}/:id?`, this.delete);
  }

  private createTable(force: boolean) {
    this.<% name %>.sync({ force });
  }

  private findAll = async (
    req: Request,
    res: Response,
    next: NextFunction,
  ): Promise<Response | void> => {
    const all = await this.<% name %> .findAll();

    if (all.length === 0) {
      return responseHandler.sendSuccessResponse({
        code: 204,
        res,
      });
    }

    responseHandler.sendSuccessResponse({
      code: 200,
      res,
      data: all,
      dataName: "<% pluralName %>",
      message: "<% Name %> were found successfully",
    });
  };

  private create = async (
    req: Request,
    res: Response,
    next: NextFunction,
  ): Promise<Response | void> => {
    try {
      const body = req.body;

      const <% name %> = await this.<% name %>.create(body);

      responseHandler.createSuccessResponse({
        res,
        data: <% name %>,
        message: '<% Name %> was created successfully',
        dataName: '<% name %>',
      });
    } catch (error: any) {
      next(new HttpException(400, error.message));
    }
  };

  private delete = async (
    req: Request,
    res: Response,
    next: NextFunction,
  ): Promise<Response | void> => {
    const id = req.params.id;

    const where: Record<string, number | string> = {};

    if (id) {
      where.id = id;
    }

    const deleteCount = await this.<% name %>.destroy({
      where,
    });

    if (deleteCount === 0) {
      return responseHandler.sendSuccessResponse({
        code: 204,
        res,
      });
    }

    responseHandler.sendSuccessResponse({
      code: 200,
      res,
      message: "<% Name %> was deleted successfully",
    });
  };
}

export default <% Name %>Controller;
