import { Router, Request, Response, NextFunction } from "express";
import Controller from "../../../utils/interfaces/Controller.interface";
import HttpException from "../../../utils/exceptions/http.exception";
import validationMiddleware from "../Middleware/validation.middleware";
import <% Name %>Request from "../Requests/<% Name %>Request";
import <% Name %>Model from "../../Models/<% Name %>Model";
import responseHandler from "../../../utils/ResponseHandler";
import <% Name %>Resource from "../Resources/<% Name %>Resource";
import {
  getWhere,
  getPagination,
  getPaginationMetaData,
} from "../../../kousta/@utils";

class <% Name %>Controller implements Controller {
  private <% name %> = <% Name %>Model;
  public path = "/<% name %>s";
  public router = Router();

  constructor(force: boolean = false) {
    this.initializeRoutes();
    this.createTable(force);
  }

  private initializeRoutes(): void {
    this.router.get("/", this.findAll);
    this.router.post(
      "/",
      validationMiddleware(<% Name %>Request.create),
      this.create,
    );
    this.router.put(
      "/:id",
      validationMiddleware(<% Name %>Request.update),
      this.update,
    );
    this.router.delete("/:id", this.delete);
  }

  private createTable(force: boolean) {
    this.<% name %>.sync({ force });
  }

  private findAll = async (
    req: Request,
    res: Response,
    next: NextFunction,
  ): Promise<Response | void> => {
    try {
      const { limit, offset, page } = getPagination(req);
      const where = getWhere(req);

      const condition: Record<string, string | number> = {};

      if (limit) {
        condition.limit = limit;
      }
      if (offset) {
        condition.offset = offset;
      }

      const { count, rows: all } = await this.<% name %>.findAndCountAll({
        where,
        ...condition,
        attributes: <% Name %>Resource.getAll,
      });

      if (all.length === 0) {
        return responseHandler.sendSuccessResponse({
          code: 204,
          res,
        });
      }

      responseHandler.sendSuccessResponse({
        code: 200,
        res,
        data: all,
        dataName: "<% name %>s",
        message: "<% Name %>s were found successfully",
        meta:
          page && limit ? getPaginationMetaData(count, page, limit) : undefined,
      });
    } catch (error: any) {
      next(new HttpException(400, "Server error"));
    }
  };

  private update = async (
    req: Request,
    res: Response,
    next: NextFunction,
  ): Promise<Response | void> => {
    try {
      const body = req.body;

      const <% name %> = await this.<% name %>.update(body, {
        where: {
          id: req.params.id,
        },
      });

      responseHandler.createSuccessResponse({
        res,
        data: <% name %>,
        message: "<% Name %> was updated successfully",
        dataName: "<% name %>",
      });
    } catch (error: any) {
      next(new HttpException(500, error.message));
    }
  };

  private create = async (
    req: Request,
    res: Response,
    next: NextFunction,
  ): Promise<Response | void> => {
    try {
      const body = req.body;

      const <% name %> = await this.<% name %>.create(body);

      responseHandler.createSuccessResponse({
        res,
        data: <% name %>,
        message: "<% Name %> was created successfully",
        dataName: "<% name %>",
      });
    } catch (error: any) {
      next(new HttpException(500, error.message));
    }
  };

  private delete = async (
    req: Request,
    res: Response,
    next: NextFunction,
  ): Promise<Response | void> => {
    try {
      const id = req.params.id;

      const deleteCount = await this.<% name %>.destroy({
        where: { id },
      });

      if (deleteCount === 0) {
        return responseHandler.sendSuccessResponse({
          code: 204,
          res,
        });
      }

      responseHandler.sendSuccessResponse({
        code: 200,
        res,
        message: "<% Name %> was deleted successfully",
      });
    } catch (error: any) {
      next(new HttpException(500, error.message));
    }
  };
}

export default <% Name %>Controller;
