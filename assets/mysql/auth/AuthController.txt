import { hash, compare } from "bcrypt";
import jwt from "jsonwebtoken";
import { Router, Request, Response, NextFunction } from "express";
import Controller from "@/Utils/interfaces/Controller.interface";
import HttpException from "@/Utils/exceptions/http.exception";
import validationMiddleware from "@/Middleware/validation.middleware";
import AuthRequest from "@/Requests/AuthRequest";
import UserModel from "@/Models/UserModel";
import responseHandler from "@/Utils/ResponseHandler";
import UserResource from "@/Resources/UserResource";
import { Op } from "sequelize";
import { isAuthorised } from "../../../kousta/@middlewares";

class AuthController implements Controller {
  private User = UserModel;
  // private RestorePassword = UserModel;
  public path = "/auth";
  public router = Router();

  constructor(force: boolean = false) {
    this.initializeRoutes();
    this.createTable(force);
  }

  private initializeRoutes(): void {
    this.router.post(
      "/signin",
      validationMiddleware(AuthRequest.signIn),
      this.signin.bind(this),
    );

    this.router.post(
      "/login",
      validationMiddleware(AuthRequest.login),
      this.login.bind(this),
    );

    this.router.get("/verifyUsername", this.verifyUsername.bind(this));

    this.router.get("/getProfile", this.getProfile.bind(this));
  }

  private createTable(force: boolean) {
    this.User.sync({ force });
  }

  private async verifyUsername(
    req: Request,
    res: Response,
    next: NextFunction,
  ) {
    try {
      const username = req.query.username as string;
      console.log(req.query);

      if (!username) {
        return res.status(400).send({
          message: "Missing username parameter",
        });
      }

      const user = await this.User.findOne({
        where: { username },
      });

      if (user) {
        return res.status(409).send({
          isValid: false,
        });
      }

      return res.status(200).send({
        isValid: true,
      });
    } catch (error) {
      next(new HttpException(500, "Server error"));
    }
  }

  private async signin(req: Request, res: Response, next: NextFunction) {
    try {
      const hashedPassword = await hash(req.body.password, 10);

      const [, isCreated] = await this.User.findOrCreate({
        where: {
          email: req.body.email,
          username: req.body.username,
        },
        defaults: { ...req.body, password: hashedPassword },
      });

      if (isCreated) {
        return responseHandler.createSuccessResponse({
          res,
          message: "User created successfully.",
        });
      }

      return responseHandler.createSuccessResponse({
        res,
        message: "the email or username is already in use.",
      });
    } catch (error: any) {
      next(new HttpException(500, "Server error"));
    }
  }

  private async login(req: Request, res: Response, next: NextFunction) {
    try {
      const user = await this.User.findOne({
        where: {
          [Op.or]: {
            email: req.body.login,
            username: req.body.login,
          },
        },
      });

      if (user) {
        const isMatch = await compare(req.body.password, user.password);
        if (isMatch) {
          const token = jwt.sign({ id: user.id }, process.env.ACCESS_TOKEN!, {
            expiresIn: "7d",
          });

          return responseHandler.sendSuccessResponse({
            res,
            message: "Login successful.",
            code: 200,
            data: { token },
          });
        }
      }

      return responseHandler.sendErrorResponse(res, 401);
    } catch (error: any) {
      console.log(error);
      next(new HttpException(500, "Server error"));
    }
  }

  @isAuthorised
  private async getProfile(req: Request, res: Response, next: NextFunction) {
    try {
      const id = req.user?.id;

      console.log(req.user);

      const user = await this.User.findOne({
        where: { id },
        attributes: UserResource.getOne,
      });

      if (!user) {
        return responseHandler.notFoundError(res, "User");
      }

      return responseHandler.sendSuccessResponse({
        res,
        message: "User profile fetched successfully.",
        data: user,
        dataName: "user",
      });
    } catch (error) {
      console.log(error);
      next(new HttpException(500, "Server error"));
    }
  }
}

export default AuthController;
